{"ast":null,"code":"var _jsxFileName = \"/Users/ridhoizzulhaq/ai-nft-minting-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport contractABI from \"./abi/PromptABI.json\"; // Gantilah dengan ABI yang benar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x0831b0B193FB2b771566c30bc65BAD8c9E62afa3\"; // Gantilah dengan alamat kontrak Prompt\nconst modelId = 11;\nconst App = () => {\n  _s();\n  const [prompt, setPrompt] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [requestId, setRequestId] = useState(null);\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        if (accounts.length === 0) {\n          alert(\"No accounts found. Please unlock Metamask.\");\n          return;\n        }\n        const contractInstance = new web3Instance.eth.Contract(contractABI, contractAddress);\n        setWeb3(web3Instance);\n        setContract(contractInstance);\n        setAccount(accounts[0]);\n        alert(`Connected: ${accounts[0]}`);\n      } catch (error) {\n        console.error(\"User denied connection\", error);\n        alert(\"User denied connection. Please allow Metamask access.\");\n      }\n    } else {\n      alert(\"Metamask is not detected. Please install Metamask.\");\n    }\n  };\n  const handleCalculateAIResult = async () => {\n    if (!contract || !account) {\n      alert(\"Please connect to Metamask first.\");\n      return;\n    }\n    try {\n      const tx = await contract.methods.calculateAIResult(modelId, prompt).send({\n        from: account,\n        value: web3.utils.toWei(\"0.01\", \"ether\")\n      });\n      const event = tx.events.PromptRequest;\n      if (event) {\n        setRequestId(event.returnValues.requestId);\n        alert(`AI Calculation Requested! Request ID: ${event.returnValues.requestId}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Transaction failed!\");\n    }\n  };\n  const handleMintWithAIResult = async () => {\n    if (!contract || !account || !requestId) {\n      alert(\"Request ID not found. Please generate AI result first.\");\n      return;\n    }\n    try {\n      const tx = await contract.methods.mintWithAIResult(requestId).send({\n        from: account\n      });\n      const event = tx.events.MintedWithAI;\n      if (event) {\n        alert(`NFT Minted! Token ID: ${event.returnValues.tokenId}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Minting failed!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI NFT Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initWeb3,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"One tagline about: ...\",\n      value: prompt,\n      onChange: e => setPrompt(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCalculateAIResult,\n      children: \"Generate AI Result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMintWithAIResult,\n      disabled: !requestId,\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fsl7fnCDoY1q8YRB0jcDYVP/eaM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","contractABI","jsxDEV","_jsxDEV","contractAddress","modelId","App","_s","prompt","setPrompt","web3","setWeb3","contract","setContract","account","setAccount","requestId","setRequestId","initWeb3","window","ethereum","web3Instance","accounts","request","method","length","alert","contractInstance","eth","Contract","error","console","handleCalculateAIResult","tx","methods","calculateAIResult","send","from","value","utils","toWei","event","events","PromptRequest","returnValues","handleMintWithAIResult","mintWithAIResult","MintedWithAI","tokenId","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","target","disabled","_c","$RefreshReg$"],"sources":["/Users/ridhoizzulhaq/ai-nft-minting-dapp/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport contractABI from \"./abi/PromptABI.json\"; // Gantilah dengan ABI yang benar\n\nconst contractAddress = \"0x0831b0B193FB2b771566c30bc65BAD8c9E62afa3\"; // Gantilah dengan alamat kontrak Prompt\nconst modelId = 11;\n\nconst App = () => {\n  const [prompt, setPrompt] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [requestId, setRequestId] = useState(null);\n\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n        try {\n            const web3Instance = new Web3(window.ethereum);\n            const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n            if (accounts.length === 0) {\n                alert(\"No accounts found. Please unlock Metamask.\");\n                return;\n            }\n\n            const contractInstance = new web3Instance.eth.Contract(contractABI, contractAddress);\n\n            setWeb3(web3Instance);\n            setContract(contractInstance);\n            setAccount(accounts[0]);\n\n            alert(`Connected: ${accounts[0]}`);\n        } catch (error) {\n            console.error(\"User denied connection\", error);\n            alert(\"User denied connection. Please allow Metamask access.\");\n        }\n    } else {\n        alert(\"Metamask is not detected. Please install Metamask.\");\n    }\n};\n\n\n  const handleCalculateAIResult = async () => {\n    if (!contract || !account) {\n      alert(\"Please connect to Metamask first.\");\n      return;\n    }\n\n    try {\n      const tx = await contract.methods.calculateAIResult(modelId, prompt).send({ from: account, value: web3.utils.toWei(\"0.01\", \"ether\") });\n      const event = tx.events.PromptRequest;\n      if (event) {\n        setRequestId(event.returnValues.requestId);\n        alert(`AI Calculation Requested! Request ID: ${event.returnValues.requestId}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Transaction failed!\");\n    }\n  };\n\n  const handleMintWithAIResult = async () => {\n    if (!contract || !account || !requestId) {\n      alert(\"Request ID not found. Please generate AI result first.\");\n      return;\n    }\n\n    try {\n      const tx = await contract.methods.mintWithAIResult(requestId).send({ from: account });\n      const event = tx.events.MintedWithAI;\n      if (event) {\n        alert(`NFT Minted! Token ID: ${event.returnValues.tokenId}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Minting failed!\");\n    }\n  };\n\n  return (\n    <div>\n      <h2>AI NFT Generator</h2>\n      <button onClick={initWeb3}>Connect Wallet</button>\n      <input\n        type=\"text\"\n        placeholder=\"One tagline about: ...\"\n        value={prompt}\n        onChange={(e) => setPrompt(e.target.value)}\n      />\n      <button onClick={handleCalculateAIResult}>Generate AI Result</button>\n      <button onClick={handleMintWithAIResult} disabled={!requestId}>Mint NFT</button>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}